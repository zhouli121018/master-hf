<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.weipai.mapper.PaylogLotMapper">
  <resultMap id="BaseResultMap" type="com.weipai.model.PaylogLot">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="managerId" jdbcType="INTEGER" property="managerid" />
    <result column="uuid" jdbcType="INTEGER" property="uuid" />
    <result column="money" jdbcType="DOUBLE" property="money" />
    <result column="payCount" jdbcType="INTEGER" property="paycount" />
    <result column="payTime" jdbcType="TIMESTAMP" property="paytime" />
    <result column="payType" jdbcType="INTEGER" property="paytype" />
    <result column="status" jdbcType="INTEGER" property="status" />
  </resultMap>
  
  <resultMap id="ExtBaseResultMap" type="com.weipai.model.PayloglotExt">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="managerId" jdbcType="INTEGER" property="managerid" />
    <result column="uuid" property="uuid" jdbcType="INTEGER" />
    <result column="serialNum" property="serialnum" jdbcType="INTEGER" />
    <result column="lotId" property="lotid" jdbcType="INTEGER" />
    <result column="betType" property="bettype" jdbcType="INTEGER" />
    <result column="betMount" property="betmount" jdbcType="INTEGER" />
    <result column="betResult" property="betresult" jdbcType="INTEGER" />
    <result column="createTime" property="createtime" jdbcType="TIMESTAMP" />
    <result column="lotResult" property="lotResult" jdbcType="VARCHAR" />
    <result column="facevalue" property="facevalue" jdbcType="VARCHAR" />
    <result column="cardcount" property="cardcount" jdbcType="VARCHAR" />
    <result column="inviteCode" jdbcType="INTEGER" property="invitecode" />
    <result column="powerId" jdbcType="INTEGER" property="powerid" />
    <result column="inviteCode1" jdbcType="INTEGER" property="invitecode1" />
    <result column="powerId1" jdbcType="INTEGER" property="powerid1" />
    <result column="nickName" property="nickName" jdbcType="VARCHAR" />
<!--     <result column="name" jdbcType="VARCHAR" property="name" /> -->
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, managerId, uuid, money, payCount, payTime, payType, status
  </sql>
  
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from paylog_lot
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  <select id="selectByManagerId" resultMap="BaseResultMap" parameterType="Map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    a.id,b.inviteCode as managerId,a.uuid,a.money,a.payCount,a.payTime,a.status
    from paylog_lot a,manager b
    where 
    a.managerId = b.id
    <if test="managerId != null" >
    and a.managerId = #{managerId,jdbcType=INTEGER}
    </if>
    <if test="pid != null" >
    and b.pid = #{pid,jdbcType=INTEGER}
    </if>
    and a.payTime &gt; #{startTime,jdbcType=TIMESTAMP}
    and a.payTime &lt; #{endTime,jdbcType=TIMESTAMP}
    and a.payType = #{payType,jdbcType=INTEGER}
    <if test="payType !=1" >
    and a.payTime &gt;(select IFNULL(MAX(payTime),from_unixtime(0)) from paylog_lot where managerId = #{managerId,jdbcType=INTEGER} and (payType = 1 or payType = 2) and status = 1)
    </if>
    order by a.payTime DESC  limit #{startNum,jdbcType=INTEGER},#{pageNumber,jdbcType=INTEGER}
  </select>
  
  
  <select id="selectByMidTime" resultMap="ExtBaseResultMap" parameterType="Map" >
select a.*,0 as inviteCode,0 powerId,0 as inviteCode1,0 powerId1,b.nickName from betlog_lot a,account b where  a.uuid = b.Uuid
<if test="startTime != null" >
 and a.createTime &gt; #{startTime,jdbcType=TIMESTAMP}
 </if>
 <if test="endTime != null" >
    and a.createTime &lt; #{endTime,jdbcType=TIMESTAMP}
    </if>
<if test="managerId != null" >
    and a.managerId = #{managerId,jdbcType=INTEGER}
    </if>
    <if test="uuid != null" >
    and a.uuid = #{uuid,jdbcType=INTEGER}
    </if>
 union 
select a.*,b.inviteCode as inviteCode,b.power_id as powerId ,0 as inviteCode1,0 powerId1,c.nickName from betlog_lot a ,manager b ,account c
where a.managerId = b.id  and a.uuid = c.Uuid 
<if test="startTime != null" >
 and a.createTime &gt; #{startTime,jdbcType=TIMESTAMP}
 </if>
 <if test="endTime != null" >
    and a.createTime &lt; #{endTime,jdbcType=TIMESTAMP}
    </if>
<if test="managerId != null" >
    and b.manager_up_id = #{managerId,jdbcType=INTEGER}
    </if>
    <if test="uuid != null" >
    and a.uuid = #{uuid,jdbcType=INTEGER}
    </if>
  ORDER BY createTime desc limit #{startNum,jdbcType=INTEGER},#{pageNumber,jdbcType=INTEGER}
  </select>
  
  
  <select id="selectByMidTimeCount" resultType="java.lang.Integer"  parameterType="Map" >
    select count(a.id) from (
    
    select a.*,0 as inviteCode,0 powerId,0 as inviteCode1,0 powerId1 from betlog_lot a where  0 = 0 
<if test="startTime != null" >
 and a.createTime &gt; #{startTime,jdbcType=TIMESTAMP}
 </if>
 <if test="endTime != null" >
    and a.createTime &lt; #{endTime,jdbcType=TIMESTAMP}
    </if>
<if test="managerId != null" >
    and a.managerId = #{managerId,jdbcType=INTEGER}
    </if>
    <if test="uuid != null" >
    and a.uuid = #{uuid,jdbcType=INTEGER}
    </if>
 union 
select a.*,b.inviteCode as inviteCode,b.power_id as powerId ,0 as inviteCode1,0 powerId1  from betlog_lot a ,manager b 
where a.managerId = b.id 
<if test="startTime != null" >
 and a.createTime &gt; #{startTime,jdbcType=TIMESTAMP}
 </if>
 <if test="endTime != null" >
    and a.createTime &lt; #{endTime,jdbcType=TIMESTAMP}
    </if>
<if test="managerId != null" >
    and b.manager_up_id = #{managerId,jdbcType=INTEGER}
    </if>
    <if test="uuid != null" >
    and a.uuid = #{uuid,jdbcType=INTEGER}
    </if>
 
  ORDER BY createTime desc
    
    ) a
  </select>
  
  <select id="selectByMidTimeSum" resultType="java.lang.Integer"  parameterType="Map" >
    select IFNULL(sum(a.betMount),0) from (
    
    select a.*,0 as inviteCode,0 powerId,0 as inviteCode1,0 powerId1 from betlog_lot a where  0 = 0 
<if test="startTime != null" >
 and a.createTime &gt; #{startTime,jdbcType=TIMESTAMP}
 </if>
 <if test="endTime != null" >
    and a.createTime &lt; #{endTime,jdbcType=TIMESTAMP}
    </if>
<if test="managerId != null" >
    and a.managerId = #{managerId,jdbcType=INTEGER}
    </if>
    <if test="uuid != null" >
    and a.uuid = #{uuid,jdbcType=INTEGER}
    </if>
 union 
select a.*,b.inviteCode as inviteCode,b.power_id as powerId ,0 as inviteCode1,0 powerId1  from betlog_lot a ,manager b 
where a.managerId = b.id 
<if test="startTime != null" >
 and a.createTime &gt; #{startTime,jdbcType=TIMESTAMP}
 </if>
 <if test="endTime != null" >
    and a.createTime &lt; #{endTime,jdbcType=TIMESTAMP}
    </if>
<if test="managerId != null" >
    and b.manager_up_id = #{managerId,jdbcType=INTEGER}
    </if>
 <if test="uuid != null" >
    and a.uuid = #{uuid,jdbcType=INTEGER}
    </if>
  ORDER BY createTime desc
    
    ) a
  </select>
  
  <select id="selectNextFourMoney" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select IFNULL(sum(a.betMount/10),0)   from betlog_lot a,manager b,manager c,manager d
    where a.managerId = b.id and b.manager_up_id = c.id  and c.manager_up_id = d.id
   
    and d.manager_up_id = #{managerId,jdbcType=INTEGER}
    and a.createTime &gt; (select IFNULL(MAX(payTime),from_unixtime(0)) from paylog where managerId = #{managerId,jdbcType=INTEGER} and (payType = 1 or payType = 2) and status = 1)
    </select>
  
	<select id="selectNextThreeMoney" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select IFNULL(sum(a.betMount/10),0)   from betlog_lot a,manager b,manager c 
    where a.managerId = b.id and b.manager_up_id = c.id
   
    and c.manager_up_id = #{managerId,jdbcType=INTEGER}
    and a.createTime &gt; (select IFNULL(MAX(payTime),from_unixtime(0)) from paylog where managerId = #{managerId,jdbcType=INTEGER} and (payType = 1 or payType = 2) and status = 1)
    </select>

  <select id="selectNextTwoMoney" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select IFNULL(sum(a.betMount/10),0)   from betlog_lot a,manager b
    where a.managerId = b.id 
   
    and b.manager_up_id = #{managerId,jdbcType=INTEGER}
    and a.createTime &gt; (select IFNULL(MAX(payTime),from_unixtime(0)) from paylog where managerId = #{managerId,jdbcType=INTEGER} and (payType = 1 or payType = 2) and status = 1)
    </select>
      
      <select id="selectNextOneMoney" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
    select 
    IFNULL(sum(betMount/10),0) 
    from betlog_lot
    where  managerId = #{managerId,jdbcType=INTEGER}
    and createTime &gt; (select IFNULL(MAX(payTime),from_unixtime(0)) from paylog where managerId = #{managerId,jdbcType=INTEGER} and (payType = 1 or payType = 2) and status = 1)
    
  </select>
  
  
  <select id="selectNextFourMoney2" resultType="java.lang.Integer" parameterType="map" >
    select IFNULL(sum(a.betMount/10),0)   from betlog_lot a,manager b,manager c,manager d
    where a.managerId = b.id and b.manager_up_id = c.id  and c.manager_up_id = d.id
   
    and d.manager_up_id = #{managerId,jdbcType=INTEGER}
    and a.createTime &gt; #{startTime,jdbcType=TIMESTAMP}
    and a.createTime &lt; #{endTime,jdbcType=TIMESTAMP}
    </select>
  
	<select id="selectNextThreeMoney2" resultType="java.lang.Integer" parameterType="map" >
    select IFNULL(sum(a.betMount/10),0)   from betlog_lot a,manager b,manager c 
    where a.managerId = b.id and b.manager_up_id = c.id
   
    and c.manager_up_id = #{managerId,jdbcType=INTEGER}
    and a.createTime &gt; #{startTime,jdbcType=TIMESTAMP}
    and a.createTime &lt; #{endTime,jdbcType=TIMESTAMP}
    </select>

  <select id="selectNextTwoMoney2" resultType="java.lang.Integer" parameterType="map" >
    select IFNULL(sum(a.betMount/10),0)   from betlog_lot a,manager b
    where a.managerId = b.id 
   
    and b.manager_up_id = #{managerId,jdbcType=INTEGER}
    and a.createTime &gt; #{startTime,jdbcType=TIMESTAMP}
    and a.createTime &lt; #{endTime,jdbcType=TIMESTAMP} 
    </select>
      
      <select id="selectNextOneMoney2" resultType="java.lang.Integer" parameterType="map" >
    select 
    IFNULL(sum(betMount/10),0) 
    from betlog_lot
    where  managerId = #{managerId,jdbcType=INTEGER}
    and createTime &gt; #{startTime,jdbcType=TIMESTAMP}
    and createTime &lt; #{endTime,jdbcType=TIMESTAMP}
    
  </select>
  
  
  <select id="selectByAllTime" resultMap="ExtBaseResultMap" parameterType="Map" >
	select a.id,a.managerId,a.uuid,a.serialNum, a.lotId, a.betType, a.betMount, a.betResult,a.createTime,a.lotResult,a.facevalue,a.cardcount,a.inviteCode,a.powerId,b.inviteCode1,b.powerId1,a.nickName from 
	(select a.*,b.inviteCode,b.power_id as powerId,0 as inviteCode1,0 powerId1 from (select m.*,n.nickName from betlog_lot m,account n where m.uuid = n.Uuid) a left join manager b on a.managerId = b.id where 1=1
	<if test="startTime != null" >
 	and a.createTime &gt; #{startTime,jdbcType=TIMESTAMP}
 	</if>
 	<if test="endTime != null" >
    and a.createTime &lt; #{endTime,jdbcType=TIMESTAMP}
    </if>
    <if test="pid != null" >
    and b.pid = #{pid,jdbcType=INTEGER}
    </if>
    <if test="serialNum != null" >
    and a.serialNum = #{serialNum,jdbcType=TIMESTAMP}
    </if>
    <if test="uuid != null" >
    and a.uuid = #{uuid,jdbcType=INTEGER}
    </if>
	) a left join 
(select a.*,b.inviteCode as inviteCode,b.power_id as powerId ,c.inviteCode as inviteCode1,c.power_id as powerId1 from betlog_lot a ,manager b,manager c where a.managerId = b.id and b.manager_up_id = c.id  
<if test="startTime != null" >
 and a.createTime &gt; #{startTime,jdbcType=TIMESTAMP}
 </if>
 <if test="endTime != null" >
    and a.createTime &lt; #{endTime,jdbcType=TIMESTAMP}
    </if>
    <if test="pid != null" >
    and b.pid = #{pid,jdbcType=INTEGER}
    </if>
    <if test="serialNum != null" >
    and a.serialNum = #{serialNum,jdbcType=TIMESTAMP}
    </if>
    <if test="uuid != null" >
    and a.uuid = #{uuid,jdbcType=INTEGER}
    </if>
) b on a.id = b.id 

 ORDER BY createTime desc  limit #{startNum,jdbcType=INTEGER},#{pageNumber,jdbcType=INTEGER}
  </select>
  
  <select id="selectByAllTimeCount" resultType="java.lang.Integer"  parameterType="Map" >
  select count(a.id)
	from 
	(select a.*,b.inviteCode,b.power_id as powerId,0 as inviteCode1,0 powerId1 from betlog_lot a left join manager b on a.managerId = b.id where 1=1
	<if test="startTime != null" >
 	and a.createTime &gt; #{startTime,jdbcType=TIMESTAMP}
 	</if>
 <if test="endTime != null" >
    and a.createTime &lt; #{endTime,jdbcType=TIMESTAMP}
    </if>
    <if test="pid != null" >
    and b.pid = #{pid,jdbcType=INTEGER}
    </if>
     <if test="serialNum != null" >
    and a.serialNum = #{serialNum,jdbcType=TIMESTAMP}
    </if>
    <if test="uuid != null" >
    and a.uuid = #{uuid,jdbcType=INTEGER}
    </if>
) a left join 
(select a.*,b.inviteCode as inviteCode,b.power_id as powerId ,c.inviteCode as inviteCode1,c.power_id as powerId1  from betlog_lot a ,manager b,manager c where a.managerId = b.id and b.manager_up_id = c.id  
<if test="startTime != null" >
 and a.createTime &gt; #{startTime,jdbcType=TIMESTAMP}
 </if>
 <if test="endTime != null" >
    and a.createTime &lt; #{endTime,jdbcType=TIMESTAMP}
    </if>
    <if test="pid != null" >
    and b.pid = #{pid,jdbcType=INTEGER}
    </if>
     <if test="serialNum != null" >
    and a.serialNum = #{serialNum,jdbcType=TIMESTAMP}
    </if>
    <if test="uuid != null" >
    and a.uuid = #{uuid,jdbcType=INTEGER}
    </if>
) b on a.id = b.id 

   
  </select>
  
  <select id="selectByAllTimeSum" resultType="java.lang.Integer"  parameterType="Map" >
  select IFNULL(sum(a.betMount),0)
	from 
	(select a.*,b.inviteCode,b.power_id as powerId,0 as inviteCode1,0 powerId1 from betlog_lot a left join manager b on a.managerId = b.id where 1=1
	<if test="startTime != null" >
 	and a.createTime &gt; #{startTime,jdbcType=TIMESTAMP}
 	</if>
 <if test="endTime != null" >
    and a.createTime &lt; #{endTime,jdbcType=TIMESTAMP}
    </if>
    <if test="pid != null" >
    and b.pid = #{pid,jdbcType=INTEGER}
    </if>
    <if test="uuid != null" >
    and a.uuid = #{uuid,jdbcType=INTEGER}
    </if>
) a left join 
(select a.*,b.inviteCode as inviteCode,b.power_id as powerId ,c.inviteCode as inviteCode1,c.power_id as powerId1  from betlog_lot a ,manager b,manager c where a.managerId = b.id and b.manager_up_id = c.id  
<if test="startTime != null" >
 and a.createTime &gt; #{startTime,jdbcType=TIMESTAMP}
 </if>
 <if test="endTime != null" >
    and a.createTime &lt; #{endTime,jdbcType=TIMESTAMP}
    </if>
    <if test="pid != null" >
    and b.pid = #{pid,jdbcType=INTEGER}
    </if>
    <if test="uuid != null" >
    and a.uuid = #{uuid,jdbcType=INTEGER}
    </if>
) b on a.id = b.id 

   
  </select>
  
  <select id="selectUserPaySum"  resultMap="BaseResultMap"  parameterType="Map" >
    select a.uuid,b.inviteCode as managerId,a.money,a.payCount  from (select uuid,managerId,sum(money) as money ,sum(payCount) as payCount 
    from paylog_lot 
    where 1=1 
    <if test="managerId != null" >
    and managerId = #{managerId,jdbcType=INTEGER}
    </if>
    and payType = 0 and status !=2 
    <if test="startTime != null" >
 and payTime &gt; #{startTime,jdbcType=TIMESTAMP}
 </if>
 <if test="endTime != null" >
    and payTime &lt; #{endTime,jdbcType=TIMESTAMP}
    </if>
    group by uuid,managerId ) a,manager b where a.managerId = b.id 
    <if test="pid != null" >
    and b.pid = #{pid,jdbcType=INTEGER} 
    </if>
    order by a.money desc limit #{startNum,jdbcType=INTEGER},#{pageNumber,jdbcType=INTEGER}
    
  </select>
  
  
  <select id="selectUserPaySumCount" resultType="java.lang.Integer" parameterType="Map" >
    select count(a.uuid)  from (select uuid,managerId,sum(money) as money ,sum(payCount) as payCount 
    from paylog_lot 
    where 1=1 
    <if test="managerId != null" >
    and managerId = #{managerId,jdbcType=INTEGER}
    </if>
    and payType = 0 and status !=2 
    <if test="startTime != null" >
 and payTime &gt; #{startTime,jdbcType=TIMESTAMP}
 </if>
 <if test="endTime != null" >
    and payTime &lt; #{endTime,jdbcType=TIMESTAMP}
    </if>
    group by uuid,managerId ) a,manager b where a.managerId = b.id
    <if test="pid != null" >
    and b.pid = #{pid,jdbcType=INTEGER}
    </if>
    
  </select>
  
  
  <select id="selectSumByManagerId" resultType="java.lang.Integer" parameterType="Map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    count(*)
    from paylog_lot
    where 1 = 1
    <if test="managerId != null" >
    and managerId = #{managerId,jdbcType=INTEGER}
    </if>
    and payTime &gt; #{startTime,jdbcType=TIMESTAMP}
    and payTime &lt; #{endTime,jdbcType=TIMESTAMP}
    and payType = #{payType,jdbcType=INTEGER}
    <if test="payType !=1" >
    and payTime &gt; (select IFNULL(MAX(payTime),from_unixtime(0)) from paylog_lot where managerId = #{managerId,jdbcType=INTEGER} and (payType = 1 or payType = 2) and status = 1)
    </if>
  </select>
  
  
  <select id="sumByManagerId" resultType="java.lang.Integer" parameterType="Map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    IFNULL(sum(money),0) 
    from paylog_lot
    where 1 = 1
    <if test="managerId != null" >
    and managerId = #{managerId,jdbcType=INTEGER}
    </if>
    and payTime &gt; #{startTime,jdbcType=TIMESTAMP}
    and payTime &lt; #{endTime,jdbcType=TIMESTAMP}
    and payType = 0 and status%10 = 0
    and payTime &gt; (select IFNULL(MAX(payTime),from_unixtime(0)) from paylog_lot where managerId = #{managerId,jdbcType=INTEGER} and (payType = 1 or payType = 2) and status = 1)
  </select>
  
  <select id="sumSubByManagerId" resultType="java.lang.Integer" parameterType="Map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select IFNULL(sum(a.money),0)   from paylog_lot a,manager b
    where a.managerId = b.id 
    <if test="managerId != null" >
    and b.manager_up_id = #{managerId,jdbcType=INTEGER}
    </if>
    
    and a.payTime &gt; #{startTime,jdbcType=TIMESTAMP}
    and a.payTime &lt; #{endTime,jdbcType=TIMESTAMP}
    and a.payType = 0 
    and a.gameId = 2 
    <if test="managerId != null" >
    and a.status%100 &lt;10
    </if>
    and payTime &gt; (select IFNULL(MAX(payTime),from_unixtime(0)) from paylog_lot where managerId = #{managerId,jdbcType=INTEGER} and (payType = 1 or payType = 2) and status = 1)
    </select>
      
    <select id="sumSub2ByManagerId" resultType="java.lang.Integer" parameterType="Map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select IFNULL(sum(a.money),0)   from paylog_lot a,manager b,manager c
    where a.managerId = b.id and b.manager_up_id = c.id
    <if test="managerId != null" >
    and c.manager_up_id = #{managerId,jdbcType=INTEGER}
    </if>
    and (c.power_id = 3||c.power_id = 4) 
    and a.payTime &gt; #{startTime,jdbcType=TIMESTAMP}
    and a.payTime &lt; #{endTime,jdbcType=TIMESTAMP}
    and a.payType = 0 

    <if test="managerId != null" >
    and a.status%1000 &lt;100
    </if>
    and payTime &gt; (select IFNULL(MAX(payTime),from_unixtime(0)) from paylog_lot where managerId = #{managerId,jdbcType=INTEGER} and (payType = 1 or payType = 2) and status = 1)
  </select>
  <select id="sumSub3ByManagerId" resultType="java.lang.Integer" parameterType="Map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select IFNULL(sum(a.money),0)   from paylog_lot a,manager b,manager c,manager d
    where a.managerId = b.id and b.manager_up_id = c.id and c.manager_up_id = d.id
    <if test="managerId != null" >
    and d.manager_up_id = #{managerId,jdbcType=INTEGER}
    </if>
    and d.power_id = 4 
    and a.payTime &gt; #{startTime,jdbcType=TIMESTAMP}
    and a.payTime &lt; #{endTime,jdbcType=TIMESTAMP}
    and a.payType = 0 
 
    <if test="managerId != null" >
    and a.status&lt;1000
    </if>
    and payTime &gt; (select IFNULL(MAX(payTime),from_unixtime(0)) from paylog_lot where managerId = #{managerId,jdbcType=INTEGER} and (payType = 1 or payType = 2) and status = 1)
      </select>

  
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from paylog_lot
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.weipai.model.PaylogLot">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into paylog_lot (id, managerId, uuid, 
      money, payCount, payTime, 
      payType, status)
    values (#{id,jdbcType=INTEGER}, #{managerid,jdbcType=INTEGER}, #{uuid,jdbcType=INTEGER}, 
      #{money,jdbcType=DOUBLE}, #{paycount,jdbcType=INTEGER}, #{paytime,jdbcType=TIMESTAMP}, 
      #{paytype,jdbcType=INTEGER}, #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.weipai.model.PaylogLot">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER">  
                SELECT LAST_INSERT_ID()  
    </selectKey>
    insert into paylog_lot
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="managerid != null">
        managerId,
      </if>
      <if test="uuid != null">
        uuid,
      </if>
      <if test="money != null">
        money,
      </if>
      <if test="paycount != null">
        payCount,
      </if>
      <if test="paytime != null">
        payTime,
      </if>
      <if test="paytype != null">
        payType,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="managerid != null">
        #{managerid,jdbcType=INTEGER},
      </if>
      <if test="uuid != null">
        #{uuid,jdbcType=INTEGER},
      </if>
      <if test="money != null">
        #{money,jdbcType=DOUBLE},
      </if>
      <if test="paycount != null">
        #{paycount,jdbcType=INTEGER},
      </if>
      <if test="paytime != null">
        #{paytime,jdbcType=TIMESTAMP},
      </if>
      <if test="paytype != null">
        #{paytype,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>

  
  <update id="tixianDone"  parameterType="map">
  	update paylog_lot
  	<if test="status != null">
        set status = #{status,jdbcType=INTEGER}
      </if>
      <if test="status == null">
        set status = 1
      </if>
    
     where id = #{id,jdbcType=INTEGER} and (payType = 1 or payType = 2) and status = 0
  </update>
  
 
  
  <update id="updateByPrimaryKeySelective" parameterType="com.weipai.model.PaylogLot">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update paylog_lot
    <set>
      <if test="managerid != null">
        managerId = #{managerid,jdbcType=INTEGER},
      </if>
      <if test="uuid != null">
        uuid = #{uuid,jdbcType=INTEGER},
      </if>
      <if test="money != null">
        money = #{money,jdbcType=DOUBLE},
      </if>
      <if test="paycount != null">
        payCount = #{paycount,jdbcType=INTEGER},
      </if>
      <if test="paytime != null">
        payTime = #{paytime,jdbcType=TIMESTAMP},
      </if>
      <if test="paytype != null">
        payType = #{paytype,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.weipai.model.PaylogLot">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update paylog_lot
    set managerId = #{managerid,jdbcType=INTEGER},
      uuid = #{uuid,jdbcType=INTEGER},
      money = #{money,jdbcType=DOUBLE},
      payCount = #{paycount,jdbcType=INTEGER},
      payTime = #{paytime,jdbcType=TIMESTAMP},
      payType = #{paytype,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>