package com.weipai.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class PaylogExample {
    /**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table paylog
	 * @mbggenerated
	 */
	protected String orderByClause;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table paylog
	 * @mbggenerated
	 */
	protected boolean distinct;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table paylog
	 * @mbggenerated
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table paylog
	 * @mbggenerated
	 */
	public PaylogExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table paylog
	 * @mbggenerated
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table paylog
	 * @mbggenerated
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table paylog
	 * @mbggenerated
	 */
	public void setDistinct(boolean distinct) {
		this.distinct = distinct;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table paylog
	 * @mbggenerated
	 */
	public boolean isDistinct() {
		return distinct;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table paylog
	 * @mbggenerated
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table paylog
	 * @mbggenerated
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table paylog
	 * @mbggenerated
	 */
	public Criteria or() {
		Criteria criteria = createCriteriaInternal();
		oredCriteria.add(criteria);
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table paylog
	 * @mbggenerated
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table paylog
	 * @mbggenerated
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table paylog
	 * @mbggenerated
	 */
	public void clear() {
		oredCriteria.clear();
		orderByClause = null;
		distinct = false;
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table paylog
	 * @mbggenerated
	 */
	protected abstract static class GeneratedCriteria {
		protected List<Criterion> criteria;

		protected GeneratedCriteria() {
			super();
			criteria = new ArrayList<Criterion>();
		}

		public boolean isValid() {
			return criteria.size() > 0;
		}

		public List<Criterion> getAllCriteria() {
			return criteria;
		}

		public List<Criterion> getCriteria() {
			return criteria;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteria.add(new Criterion(condition));
		}

		protected void addCriterion(String condition, Object value, String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property + " cannot be null");
			}
			criteria.add(new Criterion(condition, value));
		}

		protected void addCriterion(String condition, Object value1, Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property + " cannot be null");
			}
			criteria.add(new Criterion(condition, value1, value2));
		}

		public Criteria andIdIsNull() {
			addCriterion("id is null");
			return (Criteria) this;
		}

		public Criteria andIdIsNotNull() {
			addCriterion("id is not null");
			return (Criteria) this;
		}

		public Criteria andIdEqualTo(Integer value) {
			addCriterion("id =", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdNotEqualTo(Integer value) {
			addCriterion("id <>", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdGreaterThan(Integer value) {
			addCriterion("id >", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("id >=", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdLessThan(Integer value) {
			addCriterion("id <", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdLessThanOrEqualTo(Integer value) {
			addCriterion("id <=", value, "id");
			return (Criteria) this;
		}

		public Criteria andIdIn(List<Integer> values) {
			addCriterion("id in", values, "id");
			return (Criteria) this;
		}

		public Criteria andIdNotIn(List<Integer> values) {
			addCriterion("id not in", values, "id");
			return (Criteria) this;
		}

		public Criteria andIdBetween(Integer value1, Integer value2) {
			addCriterion("id between", value1, value2, "id");
			return (Criteria) this;
		}

		public Criteria andIdNotBetween(Integer value1, Integer value2) {
			addCriterion("id not between", value1, value2, "id");
			return (Criteria) this;
		}

		public Criteria andManageridIsNull() {
			addCriterion("managerId is null");
			return (Criteria) this;
		}

		public Criteria andManageridIsNotNull() {
			addCriterion("managerId is not null");
			return (Criteria) this;
		}

		public Criteria andManageridEqualTo(Integer value) {
			addCriterion("managerId =", value, "managerid");
			return (Criteria) this;
		}

		public Criteria andManageridNotEqualTo(Integer value) {
			addCriterion("managerId <>", value, "managerid");
			return (Criteria) this;
		}

		public Criteria andManageridGreaterThan(Integer value) {
			addCriterion("managerId >", value, "managerid");
			return (Criteria) this;
		}

		public Criteria andManageridGreaterThanOrEqualTo(Integer value) {
			addCriterion("managerId >=", value, "managerid");
			return (Criteria) this;
		}

		public Criteria andManageridLessThan(Integer value) {
			addCriterion("managerId <", value, "managerid");
			return (Criteria) this;
		}

		public Criteria andManageridLessThanOrEqualTo(Integer value) {
			addCriterion("managerId <=", value, "managerid");
			return (Criteria) this;
		}

		public Criteria andManageridIn(List<Integer> values) {
			addCriterion("managerId in", values, "managerid");
			return (Criteria) this;
		}

		public Criteria andManageridNotIn(List<Integer> values) {
			addCriterion("managerId not in", values, "managerid");
			return (Criteria) this;
		}

		public Criteria andManageridBetween(Integer value1, Integer value2) {
			addCriterion("managerId between", value1, value2, "managerid");
			return (Criteria) this;
		}

		public Criteria andManageridNotBetween(Integer value1, Integer value2) {
			addCriterion("managerId not between", value1, value2, "managerid");
			return (Criteria) this;
		}

		public Criteria andUuidIsNull() {
			addCriterion("uuid is null");
			return (Criteria) this;
		}

		public Criteria andUuidIsNotNull() {
			addCriterion("uuid is not null");
			return (Criteria) this;
		}

		public Criteria andUuidEqualTo(Integer value) {
			addCriterion("uuid =", value, "uuid");
			return (Criteria) this;
		}

		public Criteria andUuidNotEqualTo(Integer value) {
			addCriterion("uuid <>", value, "uuid");
			return (Criteria) this;
		}

		public Criteria andUuidGreaterThan(Integer value) {
			addCriterion("uuid >", value, "uuid");
			return (Criteria) this;
		}

		public Criteria andUuidGreaterThanOrEqualTo(Integer value) {
			addCriterion("uuid >=", value, "uuid");
			return (Criteria) this;
		}

		public Criteria andUuidLessThan(Integer value) {
			addCriterion("uuid <", value, "uuid");
			return (Criteria) this;
		}

		public Criteria andUuidLessThanOrEqualTo(Integer value) {
			addCriterion("uuid <=", value, "uuid");
			return (Criteria) this;
		}

		public Criteria andUuidIn(List<Integer> values) {
			addCriterion("uuid in", values, "uuid");
			return (Criteria) this;
		}

		public Criteria andUuidNotIn(List<Integer> values) {
			addCriterion("uuid not in", values, "uuid");
			return (Criteria) this;
		}

		public Criteria andUuidBetween(Integer value1, Integer value2) {
			addCriterion("uuid between", value1, value2, "uuid");
			return (Criteria) this;
		}

		public Criteria andUuidNotBetween(Integer value1, Integer value2) {
			addCriterion("uuid not between", value1, value2, "uuid");
			return (Criteria) this;
		}

		public Criteria andMoneyIsNull() {
			addCriterion("money is null");
			return (Criteria) this;
		}

		public Criteria andMoneyIsNotNull() {
			addCriterion("money is not null");
			return (Criteria) this;
		}

		public Criteria andMoneyEqualTo(Double value) {
			addCriterion("money =", value, "money");
			return (Criteria) this;
		}

		public Criteria andMoneyNotEqualTo(Double value) {
			addCriterion("money <>", value, "money");
			return (Criteria) this;
		}

		public Criteria andMoneyGreaterThan(Double value) {
			addCriterion("money >", value, "money");
			return (Criteria) this;
		}

		public Criteria andMoneyGreaterThanOrEqualTo(Double value) {
			addCriterion("money >=", value, "money");
			return (Criteria) this;
		}

		public Criteria andMoneyLessThan(Double value) {
			addCriterion("money <", value, "money");
			return (Criteria) this;
		}

		public Criteria andMoneyLessThanOrEqualTo(Double value) {
			addCriterion("money <=", value, "money");
			return (Criteria) this;
		}

		public Criteria andMoneyIn(List<Double> values) {
			addCriterion("money in", values, "money");
			return (Criteria) this;
		}

		public Criteria andMoneyNotIn(List<Double> values) {
			addCriterion("money not in", values, "money");
			return (Criteria) this;
		}

		public Criteria andMoneyBetween(Double value1, Double value2) {
			addCriterion("money between", value1, value2, "money");
			return (Criteria) this;
		}

		public Criteria andMoneyNotBetween(Double value1, Double value2) {
			addCriterion("money not between", value1, value2, "money");
			return (Criteria) this;
		}

		public Criteria andPaycountIsNull() {
			addCriterion("payCount is null");
			return (Criteria) this;
		}

		public Criteria andPaycountIsNotNull() {
			addCriterion("payCount is not null");
			return (Criteria) this;
		}

		public Criteria andPaycountEqualTo(Integer value) {
			addCriterion("payCount =", value, "paycount");
			return (Criteria) this;
		}

		public Criteria andPaycountNotEqualTo(Integer value) {
			addCriterion("payCount <>", value, "paycount");
			return (Criteria) this;
		}

		public Criteria andPaycountGreaterThan(Integer value) {
			addCriterion("payCount >", value, "paycount");
			return (Criteria) this;
		}

		public Criteria andPaycountGreaterThanOrEqualTo(Integer value) {
			addCriterion("payCount >=", value, "paycount");
			return (Criteria) this;
		}

		public Criteria andPaycountLessThan(Integer value) {
			addCriterion("payCount <", value, "paycount");
			return (Criteria) this;
		}

		public Criteria andPaycountLessThanOrEqualTo(Integer value) {
			addCriterion("payCount <=", value, "paycount");
			return (Criteria) this;
		}

		public Criteria andPaycountIn(List<Integer> values) {
			addCriterion("payCount in", values, "paycount");
			return (Criteria) this;
		}

		public Criteria andPaycountNotIn(List<Integer> values) {
			addCriterion("payCount not in", values, "paycount");
			return (Criteria) this;
		}

		public Criteria andPaycountBetween(Integer value1, Integer value2) {
			addCriterion("payCount between", value1, value2, "paycount");
			return (Criteria) this;
		}

		public Criteria andPaycountNotBetween(Integer value1, Integer value2) {
			addCriterion("payCount not between", value1, value2, "paycount");
			return (Criteria) this;
		}

		public Criteria andPaytimeIsNull() {
			addCriterion("payTime is null");
			return (Criteria) this;
		}

		public Criteria andPaytimeIsNotNull() {
			addCriterion("payTime is not null");
			return (Criteria) this;
		}

		public Criteria andPaytimeEqualTo(Date value) {
			addCriterion("payTime =", value, "paytime");
			return (Criteria) this;
		}

		public Criteria andPaytimeNotEqualTo(Date value) {
			addCriterion("payTime <>", value, "paytime");
			return (Criteria) this;
		}

		public Criteria andPaytimeGreaterThan(Date value) {
			addCriterion("payTime >", value, "paytime");
			return (Criteria) this;
		}

		public Criteria andPaytimeGreaterThanOrEqualTo(Date value) {
			addCriterion("payTime >=", value, "paytime");
			return (Criteria) this;
		}

		public Criteria andPaytimeLessThan(Date value) {
			addCriterion("payTime <", value, "paytime");
			return (Criteria) this;
		}

		public Criteria andPaytimeLessThanOrEqualTo(Date value) {
			addCriterion("payTime <=", value, "paytime");
			return (Criteria) this;
		}

		public Criteria andPaytimeIn(List<Date> values) {
			addCriterion("payTime in", values, "paytime");
			return (Criteria) this;
		}

		public Criteria andPaytimeNotIn(List<Date> values) {
			addCriterion("payTime not in", values, "paytime");
			return (Criteria) this;
		}

		public Criteria andPaytimeBetween(Date value1, Date value2) {
			addCriterion("payTime between", value1, value2, "paytime");
			return (Criteria) this;
		}

		public Criteria andPaytimeNotBetween(Date value1, Date value2) {
			addCriterion("payTime not between", value1, value2, "paytime");
			return (Criteria) this;
		}

		public Criteria andPaytypeIsNull() {
			addCriterion("payType is null");
			return (Criteria) this;
		}

		public Criteria andPaytypeIsNotNull() {
			addCriterion("payType is not null");
			return (Criteria) this;
		}

		public Criteria andPaytypeEqualTo(Integer value) {
			addCriterion("payType =", value, "paytype");
			return (Criteria) this;
		}

		public Criteria andPaytypeNotEqualTo(Integer value) {
			addCriterion("payType <>", value, "paytype");
			return (Criteria) this;
		}

		public Criteria andPaytypeGreaterThan(Integer value) {
			addCriterion("payType >", value, "paytype");
			return (Criteria) this;
		}

		public Criteria andPaytypeGreaterThanOrEqualTo(Integer value) {
			addCriterion("payType >=", value, "paytype");
			return (Criteria) this;
		}

		public Criteria andPaytypeLessThan(Integer value) {
			addCriterion("payType <", value, "paytype");
			return (Criteria) this;
		}

		public Criteria andPaytypeLessThanOrEqualTo(Integer value) {
			addCriterion("payType <=", value, "paytype");
			return (Criteria) this;
		}

		public Criteria andPaytypeIn(List<Integer> values) {
			addCriterion("payType in", values, "paytype");
			return (Criteria) this;
		}

		public Criteria andPaytypeNotIn(List<Integer> values) {
			addCriterion("payType not in", values, "paytype");
			return (Criteria) this;
		}

		public Criteria andPaytypeBetween(Integer value1, Integer value2) {
			addCriterion("payType between", value1, value2, "paytype");
			return (Criteria) this;
		}

		public Criteria andPaytypeNotBetween(Integer value1, Integer value2) {
			addCriterion("payType not between", value1, value2, "paytype");
			return (Criteria) this;
		}

		public Criteria andStatusIsNull() {
			addCriterion("status is null");
			return (Criteria) this;
		}

		public Criteria andStatusIsNotNull() {
			addCriterion("status is not null");
			return (Criteria) this;
		}

		public Criteria andStatusEqualTo(Integer value) {
			addCriterion("status =", value, "status");
			return (Criteria) this;
		}

		public Criteria andStatusNotEqualTo(Integer value) {
			addCriterion("status <>", value, "status");
			return (Criteria) this;
		}

		public Criteria andStatusGreaterThan(Integer value) {
			addCriterion("status >", value, "status");
			return (Criteria) this;
		}

		public Criteria andStatusGreaterThanOrEqualTo(Integer value) {
			addCriterion("status >=", value, "status");
			return (Criteria) this;
		}

		public Criteria andStatusLessThan(Integer value) {
			addCriterion("status <", value, "status");
			return (Criteria) this;
		}

		public Criteria andStatusLessThanOrEqualTo(Integer value) {
			addCriterion("status <=", value, "status");
			return (Criteria) this;
		}

		public Criteria andStatusIn(List<Integer> values) {
			addCriterion("status in", values, "status");
			return (Criteria) this;
		}

		public Criteria andStatusNotIn(List<Integer> values) {
			addCriterion("status not in", values, "status");
			return (Criteria) this;
		}

		public Criteria andStatusBetween(Integer value1, Integer value2) {
			addCriterion("status between", value1, value2, "status");
			return (Criteria) this;
		}

		public Criteria andStatusNotBetween(Integer value1, Integer value2) {
			addCriterion("status not between", value1, value2, "status");
			return (Criteria) this;
		}
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table paylog
	 * @mbggenerated
	 */
	public static class Criterion {
		private String condition;
		private Object value;
		private Object secondValue;
		private boolean noValue;
		private boolean singleValue;
		private boolean betweenValue;
		private boolean listValue;
		private String typeHandler;

		public String getCondition() {
			return condition;
		}

		public Object getValue() {
			return value;
		}

		public Object getSecondValue() {
			return secondValue;
		}

		public boolean isNoValue() {
			return noValue;
		}

		public boolean isSingleValue() {
			return singleValue;
		}

		public boolean isBetweenValue() {
			return betweenValue;
		}

		public boolean isListValue() {
			return listValue;
		}

		public String getTypeHandler() {
			return typeHandler;
		}

		protected Criterion(String condition) {
			super();
			this.condition = condition;
			this.typeHandler = null;
			this.noValue = true;
		}

		protected Criterion(String condition, Object value, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.typeHandler = typeHandler;
			if (value instanceof List<?>) {
				this.listValue = true;
			} else {
				this.singleValue = true;
			}
		}

		protected Criterion(String condition, Object value) {
			this(condition, value, null);
		}

		protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.secondValue = secondValue;
			this.typeHandler = typeHandler;
			this.betweenValue = true;
		}

		protected Criterion(String condition, Object value, Object secondValue) {
			this(condition, value, secondValue, null);
		}
	}

	/**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table paylog
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }
}